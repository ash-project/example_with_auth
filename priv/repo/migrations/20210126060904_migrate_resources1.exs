defmodule ExampleWithAuth.Repo.Migrations.MigrateResources1 do
  @moduledoc """
  Updates resources based on their most recent snapshots.

  This file was autogenerated with `mix ash_postgres.generate_migrations`
  """

  use Ecto.Migration

  def up do
    for extension <- ["citext", "pg_trgm", "uuid-ossp"] do
      execute("CREATE EXTENSION IF NOT EXISTS \"#{extension}\"")
    end

    create table(:users, primary_key: false) do
      add :id, :binary_id, null: false, default: fragment("uuid_generate_v4()"), primary_key: true
      add :updated_at, :utc_datetime_usec, null: false, default: fragment("now()")
      add :hashed_password, :text
      add :email, :citext, null: false
    end

    create unique_index(:users, [:email], name: "users_unique_email_unique_index")

    alter table(:users) do
      add :created_at, :utc_datetime_usec, null: false, default: fragment("now()")
      add :confirmed_at, :utc_datetime_usec
    end

    create table(:user_tokens, primary_key: false) do
      add :id, :binary_id, null: false, default: fragment("uuid_generate_v4()"), primary_key: true
      add :user_id, references("users", type: :binary_id, column: :id)
      add :token, :binary
      add :sent_to, :text
      add :created_at, :utc_datetime_usec, null: false, default: fragment("now()")
      add :context, :text
    end

    create unique_index(:user_tokens, [:context, :token],
             name: "user_tokens_token_context_unique_index"
           )
  end

  def down do
    drop_if_exists unique_index(:user_tokens, [:context, :token],
                     name: "user_tokens_token_context_unique_index"
                   )

    drop table("user_tokens")

    alter table(:users) do
      remove :confirmed_at
      remove :created_at
    end

    drop_if_exists unique_index(:users, [:email], name: "users_unique_email_unique_index")

    drop table("users")

    for extension <- ["citext", "pg_trgm", "uuid-ossp"] do
      execute("DROP EXTENSION IF EXISTS \"#{extension}\"")
    end
  end
end
